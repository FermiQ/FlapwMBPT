      subroutine g_rs_mi_mem(gr,gc,it,ispin,ind_tau)
      use atom_mod
      use manager_mod
      use parallel_mod
      use solid_mod
      use units_mod
      implicit none
      integer, intent(in) :: it,ispin,ind_tau
      real*8, intent(out) :: gr(nr_red,nfun,ndim3_kk(me_k+1))
      complex*16, intent(out) :: gc(nr_red,nfun,ndim3_kk(me_k+1),
     &                              nrel)
      integer :: k,k0,nbnd,ind,i,i0,ind_k,ig,j,j1,j0,iatom,isort,ia,ib,
     &           i_tau,i_star,nbas,irl,ii,ind_ir,ir,iat,ie,iii,ind_ls,
     &           ns,indls,jjj,l,li,ls,m,nd,ndim0,nee,nls
      real*8 :: v(3),fc,pi2,tu
      complex*16 :: cc
      integer, allocatable :: adr_ls(:,:),nd_nls(:),nm_nls(:,:)
      real*8, allocatable :: gx_tau(:)
      complex*16, allocatable :: g_tmp(:,:,:),tmp(:,:),tmp1(:,:),
     &                           tmp0(:,:),tmp2(:,:),tmp3(:),
     &                           g_mi(:,:,:,:),z_ord(:,:)
      pi2=pi+pi
      i_tau=me_t*ndim3_tau+ind_tau-1
      if(it==2) i_tau=n_tau-i_tau
      allocate(adr_ls(2,nsort*(nrel*maxb+1)))
      ind=0
      do isort=1,nsort
        do li=1,nrel*lmb(isort)+1
          ind=ind+1
          adr_ls(1,ind)=li
          adr_ls(2,ind)=isort
        enddo
      enddo
      nls=ind
      ndim0=nls/nproc_b
      if(ndim0*nproc_b<nls) ndim0=ndim0+1
      allocate(nd_nls(nproc_b))
      allocate(nm_nls(ndim0,nproc_b))
      call size_shift_par_load(nls,nproc_b,nd_nls,nm_nls,ndim0)
      if(irel/=2) gr=0.d0
      if(irel==2) gc=(0.d0,0.d0)
c ------------------------------------------------------------------
      do ind_ls=1,nd_nls(me_b+1)
        ls=nm_nls(ind_ls,me_b+1)
        isort=adr_ls(2,ls)
        li=adr_ls(1,ls)
        if(irel<2) then
          l=li-1
          nd=l+l+1
        else if(irel==2) then
          l=li/2
          iii=2*(li-l-l+2)-5
          jjj=l+l+iii
          nd=((li+1)/2)*2
        endif
        nee=ntle(l,isort)
        ie=n_e_apw(l,isort)
        if(augm(ie,l,isort)=='LAW') nee=nee+1
        if(augm(ie,l,isort)=='AWL') nee=nee+1
        ns=nd*nee*nhsort(isort)
        indls=nfun_ls_adr(li,isort)
        allocate(g_mi(nqdiv,nr_red,ns,nrel))
        allocate(tmp(nr_full,ns),tmp1(ns,nbasmpw))
        allocate(g_tmp(nr_full,ns,nrel),tmp3(ns))
        allocate(tmp0(ns,nbndf),tmp2(nbndf,nbndf))
        g_mi=(0.d0,0.d0)
        allocate(gx_tau(nbndf))
        do ind_k=1,ndim3_k(me_k+1)
          k0=n3_mpi_k(me_k+1)+ind_k
          nbnd=n_bnd(k0,ispin)
          nbas=nbask(k0)/nrel
          allocate(z_ord(ns,nbndf))
          do j=1,ns
            j0=nfun_order(indls+j-1)
            do ib=1,nbnd
              z_ord(j,ib)=z_bnd(j0,ib,ind_k,ispin)
            enddo
          enddo
c -----------------------------------------------------------------
          g_tmp=(0.d0,0.d0)
          if(ubi=='dft'.or.ubi==' hf') then
            tu=tau_mesh(i_tau)
            call g_x_tau(ispin,k0,gx_tau,tu,nbnd,chem_pot)
            do j=1,ns
              j0=indls+j-1
              do ib=1,nbnd
                tmp0(j,ib)=z_ord(j0,ib)*gx_tau(ib)
              enddo
            enddo
          else
            call ferm_unpack_tau(tmp2,g_full(1,1,1,ind_tau,ind_k,ispin),
     &                           nbnd,nbndf,nbndf,it)
            call zgemm('n','n',ns,nbnd,nbnd,(1.d0,0.d0),z_ord,ns,
     &                 tmp2,nbndf,(0.d0,0.d0),tmp0,ns)
          endif
          deallocate(z_ord)
          call zgemm('n','c',ns,nbask(k0),nbnd,(1.d0,0.d0),tmp0,ns,
     &               ev_bnd(1,1,ind_k,ispin),nbasmpw,(0.d0,0.d0),tmp1,
     &               ns)
          tmp1=tmp1/sqrt(amega)
          do irl=1,nrel
            tmp=(0.d0,0.d0)
            do i=1,nbas
              i0=indgb(i,k0)
              call zone1_number(gbs(:,i0),rbas,nrdiv,ind)
              ii=(irl-1)*nbas+i
              tmp(ind,1:ns)=tmp1(1:ns,ii)
            enddo
            call fft3(nrdiv(1),nrdiv(2),nrdiv(3),ns,tmp,-1)
c ----- Multiplication with the phase factor ------------------
            do i=1,nr_full
              v(:)=r_pnt(1,i)*r0b0(:,1)+r_pnt(2,i)*r0b0(:,2)
     &                                 +r_pnt(3,i)*r0b0(:,3)
              fc=-pi2*dot_product(pnt(:,k0),v)
              cc=exp(dcmplx(0.d0,fc))
              g_tmp(i,1:ns,irl)=tmp(i,1:ns)*cc
            enddo
          enddo   !! over irl
c ----------------------------------------------------------------
          do i_star=1,k_star(k0)
            k=k_list(i_star,k0)
            ig=k_group(k)
            call zone1_number(pnt(:,k),rb0,ndiv,ind)
            do j=1,nr_red
              j1=r_pnt_ind(j)
              j0=ip_r(j1,ig)
              do irl=1,nrel
                if(irel<=1) then
                  tmp3=g_tmp(j0,:,1)
                else if(irl==1) then
                  tmp3=uj(1,ig)*g_tmp(j0,:,1)+uj(3,ig)*g_tmp(j0,:,2)
                else if(irl==2) then
                  tmp3=uj(2,ig)*g_tmp(j0,:,1)+uj(4,ig)*g_tmp(j0,:,2)
                endif
                call sym_left_tl(ig,tmp3,g_mi(ind,j,:,irl),1,li,isort,
     &                           ns)
                do iat=1,nhsort(isort)
                  iatom=iat_sort(iat,isort)
                  v=tshift(:,iatom,ig)-tshift_r(:,j1,ig)
                  fc=pi2*dot_product(pnt(:,k),v)
                  cc=dcmplx(cos(fc),sin(fc))
                  do ie=1,nee
                    do m=1,nd
                      ia=indback(m,ie,iat,li,isort)
                      g_mi(ind,j,ia,irl)=g_mi(ind,j,ia,irl)*cc
                    enddo
                  enddo
                enddo
              enddo
            enddo
          enddo
        enddo   !! over ind_k
        deallocate(g_tmp,tmp0,tmp,tmp1,tmp2,tmp3,gx_tau)
        if(nproc_k/=1) call dgop(g_mi,2*nqdiv*nr_red*ns*nrel,'  +',
     &                           comm_k)
        call fft3(ndiv(1),ndiv(2),ndiv(3),ns*nr_red*nrel,g_mi,1)
        g_mi=g_mi/dfloat(nqdiv)
        do ind_ir=1,ndim3_kk(me_k+1)
          ir=n3_mpi_kk(me_k+1)+ind_ir
          do j=1,ns
            j0=nfun_order(indls+j-1)
            if(irel<=1) then
              gr(:,j0,ind_ir)=g_mi(ir,:,j,1)
            else if(irel==2) then
              do irl=1,2
                gc(:,j0,ind_ir,irl)=g_mi(ir,:,j,irl)
              enddo
            endif
          enddo
        enddo
        deallocate(g_mi)
      enddo   !! over ind_ls
      if(nproc_b/=1) then
        if(irel/=2) call dgop(gr,nr_red*nfun*ndim3_kk(me_k+1),'  +',
     &                        comm_b)
        if(irel==2) call dgop(gc,2*nr_red*nfun*ndim3_kk(me_k+1)*nrel,
     &                        '  +',comm_b)
      endif
      end
